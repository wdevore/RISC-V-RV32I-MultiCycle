#pragma once
#include <verilated.h>

// Files generated by Verilator
#include "VRangerRisc.h"
// Needed for the exposed public fields via "*verilator public*"
// and Top module
#include "VRangerRisc__Syms.h"
#include "VRangerRisc_Memory.h"

#include "VRangerRisc___024unit.h" // Enums

struct Model
{
    // The top module "RangerRisc"
    VRangerRisc___024root *top;

    // Provides access to the sub-modules either privately or publicly.
    VRangerRisc_RangerRisc *risc;

    // Symbol enums
    VRangerRisc___024unit *unit;

    // The sub-modules
    VRangerRisc_ControlMatrix *cm;
    VRangerRisc_Register *ir;
    VRangerRisc_Register *pc;
    VRangerRisc_Register *pc_prior;
    VRangerRisc_Register *mdr;
    VRangerRisc_Mux4 *wd_mux;
    VRangerRisc_Register *rsa;
    VRangerRisc_Register *rsb;
    VRangerRisc_Register *alu_out;
    VRangerRisc_Register__D4 *alu_flags;

    VRangerRisc_RegisterFile *regFile;

    VRangerRisc_Mux4 *a_mux;
    VRangerRisc_Mux4 *b_mux;

    VRangerRisc_ALU__D20 *alu;
    VRangerRisc_Immediate *imm_ext;

    VRangerRisc_Pmmu *pmmu;
    VRangerRisc_Memory *bram;

    long int fromAddr = 0;
    long int memAddr;
    int p_pcMarker = 0;
    int p_pcpMarker = 0;
    const int markerCol = 67;
    const int rowOffset = 3;

    vluint64_t timeStep_ns = 0;
    int timeStepDelayms = 10; // Default 10ms = 100Hz
    bool resetActive = false;

    //
    //     -|--- cycle ---|-
    //       ______        ______        ______        ______
    //      |      |      |      |      |      |      |
    //______|      |______|      |______|      |______|
    //
    //     -| half |-
    //        cycle
    const int fullCycle = 20; // Units (nanoseconds)
    const int halfCycle = fullCycle / 2;
    int stepSize = 0;
    int stepCnt = 0;
    bool simRunning = false;
    int p_clk_i;

    Model(VRangerRisc *cpu)
    {
        top = cpu->rootp;
        unit = cpu->__PVT____024unit;

        p_clk_i = top->clk_i;

        risc = top->RangerRisc;

        // The sub-modules
        cm = risc->matrix;
        ir = risc->ir;
        pc = risc->pc;
        pc_prior = risc->pc_prior;
        mdr = risc->mdr;
        wd_mux = risc->wd_mux;
        rsa = risc->rsa;
        rsb = risc->rsb;
        alu_out = risc->alu_out_rg;
        alu_flags = risc->alu_flags_rg;

        regFile = risc->reg_file;

        a_mux = risc->a_mux;
        b_mux = risc->b_mux;

        alu = risc->alu;
        imm_ext = risc->imm_ext;

        pmmu = risc->pmmu;
        bram = pmmu->bram;
    }

    ~Model() {}
};

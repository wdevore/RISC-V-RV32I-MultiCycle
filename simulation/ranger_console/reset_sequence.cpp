#include <stdio.h>
#include <iostream>
#include <iomanip>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VRangerRisc.h"
// Needed for the exposed public fields via "*verilator public*"
// and Top module
#include "VRangerRisc___024unit.h"
#include "VRangerRisc__Syms.h"

// Test bench files
#include "console_module.h"

extern unsigned long int wordToByteAddr(unsigned long int wordaddr);
extern int step(int timeStep, VRangerRisc___024root *top);

int reset_sequence(
    int timeStep, int holdDuration, int resetDuration
    TESTBENCH<VRangerRisc> *tb,
    VRangerRisc___024root *top)
{
    holdDuration += timeStep;
    const int duration = holdDuration + resetDuration;
    bool released = false;

    while (timeStep <= duration)
    {
        tb->eval();

        if (timeStep < holdDuration)
            top->reset_i = 0;

        // Allow enough cycles for Reset to start and complete
        if (timeStep >= holdDuration && timeStep < resetDuration && !released) {
            top->reset_i = 1; // Release
            released = true;
        }

        timeStep = step(timeStep, top);
    }

    tb->eval();

    return timeStep;
}

#include <stdio.h>
#include <iostream>
#include <iomanip>
#include <cstdint>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VTop.h"
// Needed for the exposed public fields via "*verilator public*"
// and Top module
// #include "VTop___024unit.h"
#include "VTop__Syms.h"

// Test bench files
#include "module.h"

int spiCldModulus = 100;
int spiCnt = 5; // A value > 0 forces the clocks out of sync

// ------------------------------------------------------------
// Misc
// ------------------------------------------------------------
int step(int timeStep, TESTBENCH<VTop> *tb, VTop *top)
{
    tb->eval();
    tb->dump(timeStep);

    timeStep++;

    if (timeStep % 10 == 0)
        top->pllClk_i ^= 1;

    // spiCnt++;
    // if (spiCnt % spiCldModulus == 0)
    //     top->pllClk_i ^= 1;
    
    return timeStep;
}

int assertReset(int timeStep, int duration, TESTBENCH<VTop> *tb, VTop *top)
{
    top->Rst_i_n = 0;
    while (timeStep < duration)
    {
        timeStep = step(timeStep, tb, top);
    }
    top->Rst_i_n = 1;

    return timeStep;
}

int main(int argc, char *argv[])
{
    Verilated::commandArgs(argc, argv);

    // initialize Verilog (aka SystemVerilog) module
    TESTBENCH<VTop> *tb = new TESTBENCH<VTop>();

    tb->setup();

    VTop *top = tb->core();

    vluint64_t timeStep = 0;
    int duration = 0;

    top->Rst_i_n = 1;
    top->pllClk_i = 0;
    int p_r_Clk = top->pllClk_i;
    top->SPI_CS_i_n = 1;

    // Allow any initial blocks to execute
    tb->eval();
    timeStep = step(timeStep, tb, top);

    // ---------------------------------------------
    // Perform reset
    // ---------------------------------------------
    duration = 100 + timeStep;
    timeStep = assertReset(timeStep, duration, tb, top);

    // ---------------------------------------------
    // Send a byte 0xC5
    // ---------------------------------------------
    int edgeCnt = 0;
    top->byte_to_slave = 0xC5;

    top->SPI_CS_i_n = 0;
    duration = 1710;
    while (timeStep < duration)
    {
        timeStep = step(timeStep, tb, top);
    }
    top->SPI_CS_i_n = 1;
    timeStep = step(timeStep, tb, top);

    duration = 500 + timeStep;
    while (timeStep < duration)
    {
        timeStep = step(timeStep, tb, top);
    }

    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--
    std::cout << "Edges detected: " << edgeCnt << std::endl;
    std::cout << "Finish TB." << std::endl;
    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--

    tb->shutdown();

    delete tb;

    exit(EXIT_SUCCESS);
}

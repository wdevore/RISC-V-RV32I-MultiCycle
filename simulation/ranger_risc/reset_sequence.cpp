#include <stdio.h>
#include <iostream>
#include <iomanip>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VRangerRisc.h"
// Needed for the exposed public fields via "*verilator public*"
// and Top module
#include "VRangerRisc___024unit.h"
#include "VRangerRisc__Syms.h"

// Test bench files
#include "module.h"

extern bool assertionFailure;
extern unsigned long int wordToByteAddr(unsigned long int wordaddr);
extern int step(int timeStep, TESTBENCH<VRangerRisc> *tb, VRangerRisc___024root *top);

int reset_sequence(int timeStep, int baseTime, int duration,
                   TESTBENCH<VRangerRisc> *tb,
                   VRangerRisc___024root *top,
                   VRangerRisc_RangerRisc *const irm,
                   VRangerRisc___024unit *const unit)
{
    assertionFailure = false;
    using namespace std;

    // The sub-modules
    VRangerRisc_ControlMatrix *cm = irm->matrix;
    VRangerRisc_Register *ir = irm->ir;

    cout << "(" << timeStep << ") to (" << (baseTime + duration) << ") Reset TB begin." << endl;

    // 0 -> 55
    while (timeStep <= baseTime + duration)
    {
        tb->eval();

        if (timeStep - 1 == baseTime)
        {
            top->reset_i = 0;
        }

        // When reach end of duration deactivate reset signal
        if (timeStep == baseTime + duration)
        {
            top->reset_i = 1;
            cout << "(" << timeStep << ") End Reset state." << endl;
            break;
        }

        timeStep = step(timeStep, tb, top);
    }

    int currentStep = timeStep - 1;

    cout << "--- Reset TB complete at " << currentStep << " ---" << endl;
    return timeStep;
}

#include <stdio.h>
#include <iostream>
#include <iomanip>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VCounter.h"
// Needed for the exposed public fields via "*verilator public*"
// and Top module
// #include "VCounter___024unit.h"
#include "VCounter__Syms.h"

// Test bench files
#include "module.h"

bool assertionFailure = false;

// ------------------------------------------------------------
// Misc
// ------------------------------------------------------------
int step(int timeStep, TESTBENCH<VCounter> *tb, VCounter *top)
{
    tb->eval();
    tb->dump(timeStep);

    timeStep++;

    if (timeStep % 10 == 0)
        top->clk_i ^= 1;

    return timeStep;
}

// This file is similar to a Verilog test bench file except
// is C++
int main(int argc, char *argv[])
{
    Verilated::commandArgs(argc, argv);

    // initialize Verilog (aka SystemVerilog) module
    TESTBENCH<VCounter> *tb = new TESTBENCH<VCounter>();

    tb->setup();

    VCounter *top = tb->core();

    vluint64_t timeStep = 0;
    int duration = 1000;

    top->clk_i = 0;

    // Allow any initial blocks to execute
    tb->eval();
    timeStep++;

    while (timeStep <= duration)
    {
        timeStep = step(timeStep, tb, top);
    }

    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--
    std::cout << "Finish TB." << std::endl;
    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--

    tb->shutdown();

    delete tb;

    exit(EXIT_SUCCESS);
}

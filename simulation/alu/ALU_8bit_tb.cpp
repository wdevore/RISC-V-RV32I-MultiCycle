#include <stdio.h>
#include <iostream>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VALU.h"
// Needed for the exposed public fields via "*verilator public*"
#include "VALU___024unit.h"
#include "VALU___024root.h"

// Test bench files
#include "module.h"

extern int step(int timeStep, TESTBENCH<VALU> *tb, VALU___024root *top);
extern void abort(TESTBENCH<VALU> *tb);

// This file is similar to a Verilog test bench file except
// is C++
int main(int argc, char *argv[])
{
    Verilated::commandArgs(argc, argv);

    // This object has any publicly exposed constructs
    VALU___024unit *syms = new VALU___024unit("Syms");

    // initialize Verilog module
    TESTBENCH<VALU> *tb = new TESTBENCH<VALU>();

    tb->setup();

    tb->show();

    vluint64_t timeStep = 0;

    VALU *vcore = tb->core();
    VALU___024root *top = vcore->rootp;

    // VALU *alu = tb->core();

    // https://suchprogramming.com/beginning-logic-design-part-7/

    for (int i = 0; i < 200; i++)
    {
        if (timeStep == 10)
        {
            top->a_i = 0x05;
            top->b_i = 0x05;
            top->func_op_i = syms->ALU_Ops::AddOp;
        }

        if (timeStep == 20)
        {
            // Flags: VNCZ
            //        0000
            top->a_i = 100;
            top->b_i = 80;
            top->func_op_i = syms->ALU_Ops::SubOp;
        }

        if (timeStep == 30)
        {
            // Flags: VNCZ
            //        0110
            top->a_i = 80;
            top->b_i = 100;
            top->func_op_i = syms->ALU_Ops::SubOp;
        }

        if (timeStep == 40)
        {
            // Flags: VNCZ
            //        1110
            top->a_i = 80;   // 01010000
            top->b_i = 176;  // 10110000
            top->func_op_i = syms->ALU_Ops::SubOp;
        }

        if (timeStep == 50)
        {
            // Flags: VNCZ
            //        1000
            top->a_i = 208;
            top->b_i = 112;
            top->func_op_i = syms->ALU_Ops::SubOp;
        }

        if (timeStep == 60)
        {
            // Flags: VNCZ
            //        0001
            top->a_i = 208;
            top->b_i = 208;
            top->func_op_i = syms->ALU_Ops::SubOp;
        }

        if (timeStep == 70)
        {
            // Flags: VNCZ
            //        1100
            top->a_i = 127;
            top->b_i = 127;
            top->func_op_i = syms->ALU_Ops::AddOp;
        }

        if (timeStep == 80)
        {
            // Flags: VNCZ
            //        1100
            // two positive numbers with negative results
            top->a_i = 0b01111111;  // 127
            top->b_i = 0b00000001;  // 1
            top->func_op_i = syms->ALU_Ops::AddOp;
        }

        if (timeStep == 90)
        {
            // two negative numbers with positive results
            // Flags: VNCZ
            //        1010
            top->a_i = 0b10000000;      // -8
            top->b_i = 0b11111111;      // -1
            top->func_op_i = syms->ALU_Ops::AddOp;
        }

        timeStep = step(timeStep, tb, top);
    }

    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--
    std::cout << "Finish TB." << std::endl;
    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--
    tb->shutdown();

    delete tb;

    exit(EXIT_SUCCESS);
}

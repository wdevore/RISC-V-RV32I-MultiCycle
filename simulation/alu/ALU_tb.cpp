#include <stdio.h>
#include <iostream>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VALU.h"
// Needed for the exposed public fields via "*verilator public*"
#include "VALU___024unit.h"
#include "VALU___024root.h"

// Test bench files
#include "module.h"

extern int step(int timeStep, TESTBENCH<VALU> *tb, VALU___024root *top);
extern void abort(TESTBENCH<VALU> *tb);

// This file is similar to a Verilog test bench file except
// is C++
int main(int argc, char *argv[])
{
    Verilated::commandArgs(argc, argv);

    // This object has any publicly exposed constructs
    VALU___024unit *syms = new VALU___024unit("Syms");

    // initialize Verilog module
    TESTBENCH<VALU> *tb = new TESTBENCH<VALU>();

    tb->setup();

    tb->show();

    vluint64_t timeStep = 0;

    VALU *vcore = tb->core();
    VALU___024root *top = vcore->rootp;

    // VALU *alu = tb->core();

    for (int i = 0; i < 200; i++)
    {
        // --**--**--**--**--**--**--**--**--**--**--**--**--**
        // Add operation
        // --**--**--**--**--**--**--**--**--**--**--**--**--**
        if (timeStep == 10)
        {
            top->a_i = 0x00000005;
            top->b_i = 0x00000005;
            top->func_op_i = syms->ALU_Ops::AddOp;
        }

        if (timeStep == 20)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Sub operation +
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000005;
            top->b_i = 0x00000002;
            top->func_op_i = syms->ALU_Ops::SubOp;
        }

        if (timeStep == 30)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // And operation = 0
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000005; // 101
            top->b_i = 0x00000002; // 010
            top->func_op_i = syms->ALU_Ops::AndOp;
        }

        if (timeStep == 40)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // And operation = 2
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000007; // 111
            top->b_i = 0x00000002; // 010
            top->func_op_i = syms->ALU_Ops::AndOp;
        }

        if (timeStep == 50)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Or operation = 7
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000005; // 101
            top->b_i = 0x00000002; // 010
            top->func_op_i = syms->ALU_Ops::OrOp;
        }

        if (timeStep == 60)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Xor operation = 7
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000005; // 101
            top->b_i = 0x00000002; // 010
            top->func_op_i = syms->ALU_Ops::XorOp;
        }

        if (timeStep == 70)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Xor operation = 6
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000005; // 101
            top->b_i = 0x00000003; // 011
            top->func_op_i = syms->ALU_Ops::XorOp;
        }

        if (timeStep == 80)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Sltu operation -> (3 < 5) = true = 1
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000003;
            top->b_i = 0x00000005;
            top->func_op_i = syms->ALU_Ops::SltuOp;
        }

        if (timeStep == 90)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Sltu operation -> (5 < 3) = false = 0
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000005;
            top->b_i = 0x00000003;
            top->func_op_i = syms->ALU_Ops::SltuOp;
        }

        if (timeStep == 100)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Slt operation -> (-3 < 5) = true = 1
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = -3;
            top->b_i = 5;
            top->func_op_i = syms->ALU_Ops::SltOp;
        }

        if (timeStep == 110)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Slt operation -> (5 < -3) = false = 0
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 5;
            top->b_i = -3;
            top->func_op_i = syms->ALU_Ops::SltOp;
        }

        if (timeStep == 120)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Sll operation
            // 0b0000_0000_1001_0000 << 2
            // 0b0000_0010_0100_0000 = 0x0000_0240
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000090;
            top->b_i = 2; // Shift left 2 times
            top->func_op_i = syms->ALU_Ops::SllOp;
        }

        if (timeStep == 130)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Sll operation
            // 0b0000_0000_1001_0000 >> 2
            // 0b0000_0000_0010_0100 = 0x0000_0024
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000090;
            top->b_i = 2; // Shift left 2 times
            top->func_op_i = syms->ALU_Ops::SrlOp;
        }

        if (timeStep == 140)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Sra operation = Sll
            // 0b0000_0000_1001_0000 >> 2
            // 0b0000_0000_0010_0100 = 0x0000_0024
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x00000090;
            top->b_i = 2; // Shift right 2 times
            top->func_op_i = syms->ALU_Ops::SraOp;
        }

        if (timeStep == 150)
        {
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            // Sra operation != Sll
            // 0b1000_0000_0000_0000_0000_0000_1001_0000 >> 2
            // 0b1110_0000_0000_0000_0000_0000_0010_0100
            // = 0xE000_0024
            // --**--**--**--**--**--**--**--**--**--**--**--**--**
            top->a_i = 0x80000090;
            top->b_i = 2; // Shift right 2 times
            top->func_op_i = syms->ALU_Ops::SraOp;
        }

        timeStep = step(timeStep, tb, top);
    }

    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--
    std::cout << "Finish TB." << std::endl;
    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--
    tb->shutdown();

    delete tb;

    exit(EXIT_SUCCESS);
}

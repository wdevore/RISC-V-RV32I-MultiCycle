#include <stdio.h>
#include <iostream>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VALU.h"
// Needed for the exposed public fields via "*verilator public*"
#include "VALU___024unit.h"

// Test bench files
#include "module.h"

vluint64_t sim_time = 0;

// This file is similar to a Verilog test bench file except
// is C++
int main(int argc, char *argv[])
{
    Verilated::commandArgs(argc, argv);

    // This object has any publicly exposed constructs
    VALU___024unit *syms = new VALU___024unit("Syms");

    // initialize Verilog module
    TESTBENCH<VALU> *tb = new TESTBENCH<VALU>();

    tb->setup();

    tb->show();

    VALU *alu = tb->core();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Add operation
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000005;
    alu->b_i = 0x00000005;
    alu->func_op_i = syms->ALU_Ops::AddOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Sub operation +
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000005;
    alu->b_i = 0x00000002;
    alu->func_op_i = syms->ALU_Ops::SubOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Sub operation -
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000002;
    alu->b_i = 0x00000005;
    alu->func_op_i = syms->ALU_Ops::SubOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // And operation = 0
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000005; // 101
    alu->b_i = 0x00000002; // 010
    alu->func_op_i = syms->ALU_Ops::AndOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // And operation = 2
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000007; // 111
    alu->b_i = 0x00000002; // 010
    alu->func_op_i = syms->ALU_Ops::AndOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Or operation = 7
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000005; // 101
    alu->b_i = 0x00000002; // 010
    alu->func_op_i = syms->ALU_Ops::OrOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Xor operation = 7
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000005; // 101
    alu->b_i = 0x00000002; // 010
    alu->func_op_i = syms->ALU_Ops::XorOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Xor operation = 6
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000005; // 101
    alu->b_i = 0x00000003; // 011
    alu->func_op_i = syms->ALU_Ops::XorOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Sltu operation -> (3 < 5) = true = 1
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000003;
    alu->b_i = 0x00000005;
    alu->func_op_i = syms->ALU_Ops::SltuOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Sltu operation -> (5 < 3) = false = 0
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000005;
    alu->b_i = 0x00000003;
    alu->func_op_i = syms->ALU_Ops::SltuOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Slt operation -> (-3 < 5) = true = 1
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = -3;
    alu->b_i = 5;
    alu->func_op_i = syms->ALU_Ops::SltOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Slt operation -> (5 < -3) = false = 0
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 5;
    alu->b_i = -3;
    alu->func_op_i = syms->ALU_Ops::SltOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Sll operation
    // 0b0000_0000_1001_0000 << 2
    // 0b0000_0010_0100_0000 = 0x0000_0240
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000090;
    alu->b_i = 2;   // Shift left 2 times
    alu->func_op_i = syms->ALU_Ops::SllOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Sll operation
    // 0b0000_0000_1001_0000 >> 2
    // 0b0000_0000_0010_0100 = 0x0000_0024
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000090;
    alu->b_i = 2;   // Shift left 2 times
    alu->func_op_i = syms->ALU_Ops::SrlOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Sra operation = Sll
    // 0b0000_0000_1001_0000 >> 2
    // 0b0000_0000_0010_0100 = 0x0000_0024
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x00000090;
    alu->b_i = 2;   // Shift right 2 times
    alu->func_op_i = syms->ALU_Ops::SraOp;
    tb->sampletick();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Sra operation != Sll
    // 0b1000_0000_0000_0000_0000_0000_1001_0000 >> 2
    // 0b1110_0000_0000_0000_0000_0000_0010_0100
    // = 0xE000_0024
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    alu->a_i = 0x80000090;
    alu->b_i = 2;   // Shift right 2 times
    alu->func_op_i = syms->ALU_Ops::SraOp;
    tb->sampletick();

    tb->sampletick();
    tb->sampletick();
    tb->sampletick();

    tb->shutdown();

    delete tb;

    exit(EXIT_SUCCESS);
}

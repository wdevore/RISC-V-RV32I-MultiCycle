#include <stdio.h>
#include <iostream>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VImmediate.h"
// Needed for the exposed public fields via "*verilator public*"
// and Top module
#include "VImmediate___024root.h"

// Test bench files
#include "module.h"

void tick(VImmediate___024root *top, TESTBENCH<VImmediate> *tb)
{
    tb->eval();
    tb->dump(tb->tick());
}

void tock(VImmediate___024root *top, TESTBENCH<VImmediate> *tb)
{
    tb->eval();
    tb->dump(tb->tick());
}

void clock(VImmediate___024root *top, TESTBENCH<VImmediate> *tb)
{
    tick(top, tb);
    tock(top, tb);
}

// This file is similar to a Verilog test bench file except
// is C++
int main(int argc, char *argv[])
{
    Verilated::commandArgs(argc, argv);

    // initialize Verilog (aka SystemVerilog) module
    TESTBENCH<VImmediate> *tb = new TESTBENCH<VImmediate>();

    tb->setup();

    tb->show();

    VImmediate *vimm = tb->core();

    // This XXX___024unit has any publicly exposed constructs                   |
    VImmediate___024root *top = vimm->rootp;

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // I-Type
    // NOP pseudo instruction is encoded as ADDI x0, x0, 0
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // funct7 | rs2 | rs1 | funct3 | rd   |  opcode
    // 0000000 00000 00000   000    00000   0010011
    // Nibbles: 0000_0000_0000_0000_0000_0000_0001_0011
    // Hex: 0x00000013
    top->ir_i = 0x00000013;
    clock(top, tb);
    clock(top, tb);

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // I-Type specialization: shift left logical
    // slli a0, a0, 3
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    //   imm  |shamt| rs1 | funct3 | rd   |  opcode
    // 0000000 00011 00000   001    00000   0010011
    // Nibbles: 0000_0000_0011_0000_0001_0000_0001_0011
    // Hex: 0x00301013
    top->ir_i = 0x00301013;
    clock(top, tb);
    clock(top, tb);

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // S-Type
    // sw x5, 8(x2)
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // imm11:5 | rs2 | rs1 | funct3 | imm4:0   |  opcode
    // 0000000  00101 00010   010     01000      0100011
    // Nibbles: 0000_0010_0101_0001_0010_0100_0010_0011
    // Hex: 0x00512423
    // Imm = 0000_0000_1000 = 008
    top->ir_i = 0x00512423;
    clock(top, tb);
    clock(top, tb);

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // B-Type
    // beq x19, x10, 16      ==> branch forward 4*bytes = 16
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // imm12|10:5 | rs2 | rs1 | funct3 | imm4:0|11 |  opcode
    // 0000000     00101 00110   000        01010    1100011
    // Nibbles: 0000_0000_1010_1001_1000_1000_0110_0011
    // Hex: 0x00A98863
    // Imm = 0000_0000_1000 = 008
    top->ir_i = 0x00A98863;
    clock(top, tb);
    clock(top, tb);

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // U-Type
    // lui x10, 0x87654
    // 0x87654 = 1000_0111_0110_0101_0100
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    //          imm31:12                   |   rd   | opcode
    // 10000111011001010100                  01010    0110111
    // Nibbles: 1000_0111_0110_0101_0100_0101_0011_0111
    // Hex: 0x87654537
    // Imm = 87654000
    top->ir_i = 0x87654537;
    clock(top, tb);
    clock(top, tb);

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // J-Type
    // jal x1, 32
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    //          imm31:12         |   rd   | opcode
    // 00000010000000000000        00001    1101111
    // Nibbles: 0000_0010_0000_0000_0000_0000_1110_1111
    // Hex: 0x020000EF
    // Imm = 0x00000020
    top->ir_i = 0x020000EF;
    clock(top, tb);
    clock(top, tb);

    std::cout << "F TB: time (" << tb->time() << ")" << std::endl;

    tb->shutdown();

    delete tb;

    exit(EXIT_SUCCESS);
}

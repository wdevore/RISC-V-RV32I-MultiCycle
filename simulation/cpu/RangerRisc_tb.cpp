#include <stdio.h>
#include <iostream>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VControlMatrix.h"
// Needed for the exposed public fields via "*verilator public*"
// and Top module
#include "VControlMatrix___024unit.h"
#include "VControlMatrix__Syms.h"

// Test bench files
#include "module.h"

bool assertionFailure = false;

// Examples of field access
// cmU->ALU_Ops::SraOp

// ------------------------------------------------------------
// Misc
// ------------------------------------------------------------
extern unsigned long int wordToByteAddr(unsigned long int wordaddr);
extern int step(int timeStep, TESTBENCH<VControlMatrix> *tb, VControlMatrix___024root *top);
extern void abort(TESTBENCH<VControlMatrix> *tb);

extern int reset_sequence(int timeStep, int baseTime, int duration, VControlMatrix___024root *top, TESTBENCH<VControlMatrix> *tb, VControlMatrix_ControlMatrix *cm, VControlMatrix___024unit *const cmU);
extern int fetch_sequence(int timeStep, int baseTime, int duration, VControlMatrix___024root *top, TESTBENCH<VControlMatrix> *tb, VControlMatrix_ControlMatrix *cm, VControlMatrix___024unit *const cmU);

// This file is similar to a Verilog test bench file except
// is C++
int main(int argc, char *argv[])
{
    Verilated::commandArgs(argc, argv);

    // initialize Verilog (aka SystemVerilog) module
    TESTBENCH<VControlMatrix> *tb = new TESTBENCH<VControlMatrix>();

    tb->setup();

    tb->show();

    VControlMatrix *vcm = tb->core();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Not recommended. This will give you a separate instance.
    // VControlMatrix___024unit *cmU = new VControlMatrix___024unit("cmU");
    // 
    // You want the module's instance that is used for simulation. >---------\
    // This XXX___024unit has any publicly or privately exposed constructs    |
    // --**--**--**--**--**--**--**--**--**--**--**--**--**                   |
    VControlMatrix___024unit *const cmU = vcm->__PVT____024unit; // <--------/
    VControlMatrix___024root *top = vcm->rootp;
    VControlMatrix_ControlMatrix *cm = vcm->ControlMatrix;

    vluint64_t timeStep = 0;

    int duration = 45;
    int baseTime = 10;

    // Allow any initial blocks to execute
    tb->eval();

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // Starting defaults
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    top->mem_busy_i = 0;    // Memory is ready (i.e. not busy)
    top->ir_i = 0x00000000; // No instruction (invalid)

    timeStep = reset_sequence(timeStep, baseTime, duration, top, tb, cm, cmU);
    if (assertionFailure)
        abort(tb);

    duration = 45;
    baseTime = timeStep;

    timeStep = fetch_sequence(timeStep, baseTime, duration, top, tb, cm, cmU);
    if (assertionFailure)
        abort(tb);

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // I-Type: NOP is encoded as ADDI x0, x0, 0
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // funct7 | rs2 | rs1 | funct3 | rd   |  opcode
    // 0000000 00000 00000   000    00000   0010011
    // Nibbles: 0000_0000_0000_0000_0000_0000_0001_0011
    // Hex: 0x00000013
    // top->ir_i = 0x00000013;

    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // R-Type: add x5, x6, x7   =>   x5 = x6 + x7
    // From: Nihongo/Hardware/RISC-V/RISC-V Instruction Formats.pdf
    // --**--**--**--**--**--**--**--**--**--**--**--**--**
    // funct7 | rs2 | rs1 | funct3 | rd   |  opcode
    // 0000000 00111 00110   000    00101   0110011
    // Nibbles: 0000_0000_0111_0011_0000_0010_1011_0011
    // Hex: 0x007302B3
    // top->ir_i = 0x007302B3;

    std::cout << "Running to duration" << std::endl;
    int testDuration = timeStep + 75;
    while (timeStep < testDuration)
    {
        timeStep = step(timeStep, tb, top);
    }

    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--
    std::cout << "Finish TB." << std::endl;
    // :--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--:--

    tb->shutdown();

    delete tb;

    exit(EXIT_SUCCESS);
}

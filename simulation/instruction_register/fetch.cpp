#include <stdio.h>
#include <iostream>
#include <iomanip>

// Files generated by Verilator
#include <verilated.h>
#include <verilated_vcd_c.h>
#include "VIRModule.h"
// Needed for the exposed public fields via "*verilator public*"
// and Top module
#include "VIRModule___024unit.h"
#include "VIRModule__Syms.h"

// Test bench files
#include "module.h"

extern bool assertionFailure;
extern unsigned long int wordToByteAddr(unsigned long int wordaddr);
extern int step(int timeStep, TESTBENCH<VIRModule> *tb, VIRModule___024root *top);

int fetch_sequence(int timeStep, int baseTime, int duration,
                   TESTBENCH<VIRModule> *tb,
                   VIRModule___024root *top,
                   VIRModule_IRModule *const irm,
                   VIRModule___024unit *const unit)
{
    assertionFailure = false;
    using namespace std;

    VIRModule_ControlMatrix *cm = irm->matrix;

    tb->eval();

    bool fetch_state_reached = false;
    int prv_ir_ld = irm->cm_to_ir_ld;
    cout << std::dec;
    cout << "(" << timeStep << ") to (" << (baseTime + duration) << ") Fetch TB begin." << endl;

    while (timeStep <= baseTime + 100)
    {
        tb->eval();
        // VL_PRINTF("(%d) ir_ld: %d, ", timeStep, irm->cm_to_ir_ld);
        // cout << "(" << timeStep << ") ir_ld: " << irm->ir_ld << ", " << endl;
        // VL_PRINTF("state: %d\n", cm->state);
        // Run until we transition from Reset to Fetch state
        if (cm->state == unit->MatrixState::Fetch && !fetch_state_reached)
        {
            cout << "Fetch occurred at " << timeStep << endl;
            fetch_state_reached = true;
        }

        // The IR register is loaded on the following rising edge (0 -> 1)
        bool risingEdgeDetected = prv_ir_ld == 0 && irm->cm_to_ir_ld == 1;
        if (fetch_state_reached && risingEdgeDetected)
        {
            VL_PRINTF("(%d) ir_out: 0x%x \n", timeStep, irm->ir_out);
        }

        prv_ir_ld = irm->cm_to_ir_ld;

        timeStep = step(timeStep, tb, top);
    }

    int currentStep = timeStep - 1;

    // Test assertion
    // if (!fetch_state_reached)
    // {
    //     cout << "###########################################" << endl;
    //     cout << "# (" << currentStep << ") expected fetch_state_reached" << endl;
    //     cout << "###########################################" << endl;
    //     assertionFailure = true;
    // }

    cout << "--- Fetch TB complete at " << timeStep << " ---" << endl;
    return timeStep;
}
